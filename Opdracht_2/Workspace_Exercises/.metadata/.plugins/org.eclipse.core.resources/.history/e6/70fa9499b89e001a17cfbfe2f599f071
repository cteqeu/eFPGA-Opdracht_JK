#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "IP_MATRIX.h"
#include "sleep.h"
#include "xscugic.h"
#include "xscutimer.h"

//#include "Libs/MatrixDecoderLib.h"
//#include "Libs/Numbers.h"

#define bitRead(value, bit) (((value) >> (bit)) & 0x01)

uint16_t bitStream[8];
const uint16_t columns[8] = {0b0000000010000000, 0b0000000000000100, 0b0000001000000000, 0b0000000000010000, 0b0000000100000000, 0b0000010000000000, 0b1000000000000000, 0b0001000000000000}; //C1 C2 C3 C4 C5 C6 C7 C8

uint8_t clock_picture2[8] = {0b00000000,
                            0b00111100,
                            0b00100100,
							0b00100100,
							0b00100100,
							0b00100100,
							0b00111100,
                            0b00000000};

uint8_t clock_picture[8] = {0b11111111,
                            0b11111111,
                            0b11111111,
							0b11111111,
							0b11111111,
							0b11111111,
							0b11111111,
                            0b11111111};


void displayData(uint16_t message);
void encodeMessage();
uint8_t* ReturnNumber(uint16_t LetterRequest);
void MessageDecoder(uint8_t* Message, uint16_t BitStream[8]);

int main()
{
	init_platform();

    while(1)
    {
    	MessageDecoder(clock_picture, bitStream);
    	encodeMessage();
    	//mtrxClear();
    }
    cleanup_platform();
    return 0;
}

void displayData(uint16_t message)
{
  printf("0b");
  for (int i = 0; i <= 15; i++)
  {
   	IP_MATRIX_mWriteReg(XPAR_IP_MATRIX_0_S00_AXI_BASEADDR,IP_MATRIX_S00_AXI_SLV_REG0_OFFSET, message);
   	printf("%d", bitRead(message, i));
   	//sleep_A9(1);
  }
  printf("\n");
}

void encodeMessage()
{
  for (int j = 0; j < 8; j++)
  {
	printf("%d : ", j);
    displayData(~bitStream[j] & columns[j]);
    usleep_A9(15);
  }
}


/*
 0000 0000 0000 0000
 1111 1111 1111 1111
 0b1101011100010110



*/
void MessageDecoder(uint8_t* Message, uint16_t BitStream[8])
{
    uint16_t Bit = 0;
    for(uint8_t i = 0; i < 8; i++)
    {
        for(uint8_t j=0; j<8; j++)
        {
            switch(j)
            {
                case 0:
                    Bit = (((Message[j]>>(7-i)) & 1) << 15);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 1:
                    Bit = (((Message[j]>>(7-i)) & 1) << 14);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 2:
                    Bit = (((Message[j]>>(7-i)) & 1) << 10);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 3:
                    Bit = (((Message[j]>>(7-i)) & 1) << 4);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 4:
                    Bit = (((Message[j]>>(7-i)) & 1) << 9);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 5:
                    Bit = (((Message[j]>>(7-i)) & 1) << 2);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 6:
                    Bit = (((Message[j]>>(7-i)) & 1) << 1);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
                case 7:
                    Bit = (((Message[j]>>(7-i)) & 1) << 12);
                    BitStream[i] = (BitStream[i] ^ Bit);
                    break;
            }
        }
    }
}
